#section 9: Jobs API 168. Intro
    https://www.johnsmilga.com/projects -> jobs App
        repo-source code: https://github.com/john-smilga/react-jobs-app/tree/main/src

#section 9: Jobs API 169. Setup
    langkah pertama , npm install && npm start
    pada browser : http://localhost:3000
    jika muncul kalimat 'jobs api' berarti setup yang kita lakukan berhasil.

#section 9: Jobs API | 170. Controllers

#section 9: Jobs API | 171. Routes

#section 9: Jobs API | 172. Database Connection
    - create file : starter/.env
    - mongodb atlas :
        click connect -> connect your aplication (baris ke 2) -> copy aplication code:
            mongodb+srv://ujang:<password>@nodeexpressproject.kfzgl.mongodb.net/myFirstDatabase?retryWrites=true&w=majority

#section 9: Jobs API | 173. User Schema
    Documentation: https://mongoosejs.com/docs/validation.html
                        https://mongoosejs.com/docs/5.x/docs/schematypes.html#string-validators

#section 9: Jobs API | 174. Create User - Basic Setup
    Pengujian pada postman:
        Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"john", "email":"john@gmail.com","password":"secret"
            }
        response akan menampilkan : 'register user'
    
    Pengujian kembali  pada postman:
        Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"john", "email":"john@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "_id": "6198a719c424f427c45f2ff7",
                    "name": "john",
                    "email": "john@gmail.com",
                    "password": "secret",
                    "__v": 0
                }
            }

#section 9: Jobs API | 175. Error Checking - Controller Example
    Pengujian  pada postman:
     Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"john", "email":"john@gmail.com","password":"secret"
            }
        ketika password/email disalahkan atau kosong response akan menampilkan : 
            {
                "msg": "Please provide name, email and password"
            }

#section 9: Jobs API | 176. Hashing Password Info
    Documentation: https://www.npmjs.com/package/bcryptjs
        untuk menginstall via npm : npm install bcryptjs

#section 9: Jobs API | 177. Hash User Password
    Pengujian  pada postman:
     Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"john", "email":"john@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "_id": "6198c81836b72c1cf210a461",
                    "name": "john",
                    "email": "john@gmail.com",
                    "password": "$2a$10$/q.D/35l1KpQk.piLDtQw.tQKLAdUhkjnRk0lXGLRhIdK5YLE8QmS",
                    "__v": 0
                }
            }
        
        terlihat jika password sudah ter-encrypsi kedalam bentuk token.

#section 9: Jobs API | 178. Mongoose Middleware
    Documentation: https://mongoosejs.com/docs/5.x/docs/middleware.html#pre
    Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"john", "email":"john@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "_id": "6198c81836b72c1cf210a461",
                    "name": "john",
                    "email": "john@gmail.com",
                    "password": "$2a$10$/q.D/35l1KpQk.piLDtQw.tQKLAdUhkjnRk0lXGLRhIdK5YLE8QmS",
                    "__v": 0
                }
            }
        
        terlihat jika password sudah ter-encrypsi kedalam bentuk token.

#section 9: Jobs API | 179. Generate Token - Controller
    coba lakukan pemguian pada postman:
    Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"john", "email":"john@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "name": "john"
                },
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTk4ZGEzODcwZjM4YzJmOTEzMWZlY2UiLCJuYW1lIjoiam9obiIsImlhdCI6MTYzNzQwNzI4OSwiZXhwIjoxNjM5OTk5Mjg5fQ.4AoA96enMISrz6vYX3qcR55zYVBenS-yU79Kw0CkS5g"
            }
        
        token akan tergenerate.

#section 9: Jobs API | 180. Generate Token - Instance Method 
    Documentation: https://mongoosejs.com/docs/5.x/docs/guide.html#methods
    coba lakukan pemguian pada postman:
    Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"anna", "email":"anna@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "name": "anna"
                },
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTk4ZGEzODcwZjM4YzJmOTEzMWZlY2UiLCJuYW1lIjoiam9obiIsImlhdCI6MTYzNzQwNzI4OSwiZXhwIjoxNjM5OTk5Mjg5fQ.4AoA96enMISrz6vYX3qcR55zYVBenS-yU79Kw0CkS5g"
            }
        
        token akan tergenerate.

    coba kembali lakukan pemguian pada postman:
    Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"peter", "email":"peter@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "name": "peter"
                },
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTk4ZGEzODcwZjM4YzJmOTEzMWZlY2UiLCJuYW1lIjoiam9obiIsImlhdCI6MTYzNzQwNzI4OSwiZXhwIjoxNjM5OTk5Mjg5fQ.4AoA96enMISrz6vYX3qcR55zYVBenS-yU79Kw0CkS5g"
            }
        
        token akan tergenerate pula.

#section 9: Jobs API | 181. JWT_SECRET and JWT_LIFETIME
    WEB untuk Generate token :
        Documentation: https://www.allkeysgenerator.com/
        gunkan encryption Key -> 256-bit:
            'G+KbPeShVmYq3t6v9y$B&E)H@McQfTjW'
    Pengujian pada postman:
        lakukan register kembali dengan nama yang belum tertera pada database:
            Register User
        POST {{URL}}/auth/register
        body => raw => json :
            {
                "name":"susi", "email":"susi@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "name": "susi"
                },
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTk4ZGEzODcwZjM4YzJmOTEzMWZlY2UiLCJuYW1lIjoiam9obiIsImlhdCI6MTYzNzQwNzI4OSwiZXhwIjoxNjM5OTk5Mjg5fQ.4AoA96enMISrz6vYX3qcR55zYVBenS-yU79Kw0CkS5g"
            }
        
        token akan tergenerate kembali.

#section 9: Jobs API | 182. Login Controller Setup
    pengujian dengan file request.rest klik kalimat Send Request:
        ###
        POST  http://localhost:3000/api/v1/auth/login
        Content-Type: application/json

            {
                "email":"john@gmail.com","password":"secret"
            }
        maka hasil responsenya akan tampil:
            {
                "user": {
                    "name": "john"
                },
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTlhMTAzZjVkNTY2OTIwNTJhMzExYmIiLCJuYW1lIjoiam9obiIsImlhdCI6MTYzNzQ5MDUzNywiZXhwIjoxNjQwMDgyNTM3fQ.B0Q6KrEYuIo0vw4zN0cAMeVxCaJk8K_eiFf4QrgUR7Q"
            }

#section 9: Jobs API | 183.Compare Password
    pengujian dengan file request.rest klik kalimat Send Request:
        ###
        POST  http://localhost:3000/api/v1/auth/login
        Content-Type: application/json

            {
                "email":"john@gmail.com","password":"secre"
            }
        coba mem-masukan password yang salah saat send request, maka response akan menampilkan:
            {
                "msg": "Invalid Credentials"
            }

#section 9: Jobs API | 184. Auth Middleware - Setup

#section 9: Jobs API | 185. Auth Middleware - Testing

    coba lakukan pengujian pada postman:
    Login User
        POST {{URL}}/auth/login
        body => raw => json :
            {
                "email":"anna@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "name": "anna"
                },
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTk4ZGEzODcwZjM4YzJmOTEzMWZlY2UiLCJuYW1lIjoiam9obiIsImlhdCI6MTYzNzQwNzI4OSwiZXhwIjoxNjM5OTk5Mjg5fQ.4AoA96enMISrz6vYX3qcR55zYVBenS-yU79Kw0CkS5g"
            }
        copy paste token pada Jobs :
        POST {{URL}}/jobs
            Headers -> Authorization : Bearer <token>

        hasil response:
            {
                "userId": "619b574667aff427e030f7b9",
                "name": "anna"
            }

#section 9: Jobs API | 186. Alternative Code

#section 9: Jobs API | 187. Job Model

#section 9: Jobs API | 188. Create Job Route
    pengujian pada postman:
        Create Job:
            POST {{URL}}/jobs
            body -> raw -> json:
                {
                    "company":"google", "position":"intern"
                }
            hasil response:
            {
                "job": {
                    "status": "pending",
                    "_id": "619b5f10a0cc6e31a9e5524f",
                    "company": "google",
                    "position": "intern",
                    "createdBy": "619b5503787e7f25f0164ec0",
                    "createdAt": "2021-11-22T09:12:48.705Z",
                    "updatedAt": "2021-11-22T09:12:48.705Z",
                    "__v": 0
                }
            }
            dan pada databse mongoDB atlas ; data berhasil tersimpan didatabase.

#section 9: Jobs API | 189. Get All Jobs
    pengujian pada postman:
        Get All Job:
            GET {{URL}}/jobs
            Headers -> Authorization : Bearer <token>
         hasil response: 
            {
            "jobs": [
                {
                    "status": "pending",
                    "_id": "619b5e74541e863034b2c4f9",
                    "company": "google",
                    "position": "intern",
                    "createdBy": "619b5503787e7f25f0164ec0",
                    "createdAt": "2021-11-22T09:10:12.596Z",
                    "updatedAt": "2021-11-22T09:10:12.596Z",
                    "__v": 0
                },
                {
                    "status": "pending",
                    "_id": "619b5f10a0cc6e31a9e5524f",
                    "company": "google",
                    "position": "intern",
                    "createdBy": "619b5503787e7f25f0164ec0",
                    "createdAt": "2021-11-22T09:12:48.705Z",
                    "updatedAt": "2021-11-22T09:12:48.705Z",
                    "__v": 0
                }]
            }

#section 9: Jobs API | 190. Set Token Dynamically in Postman
    pada postman:
    ##Step 1:
    Login User -> Tests :
        const jsonData = pm.response.json()
    lalu pada snippet pilih set global varible:
        pm.globals.set("variable_key", "variable_value");
    lalu rubah seperti dibawah ini:
        pm.globals.set("accessToken", jsonData.token);
    "LAKUKAN HAL YANG SAMA UNTUK REGISTER"

    sekarang coba lakukan send data:

        POST {{URL}}/auth/login
        body => raw => json :
            {
                "email":"anna@gmail.com","password":"secret"
            }
        response akan menampilkan : 
            {
                "user": {
                    "name": "anna"
                },
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MTk4ZGEzODcwZjM4YzJmOTEzMWZlY2UiLCJuYW1lIjoiam9obiIsImlhdCI6MTYzNzQwNzI4OSwiZXhwIjoxNjM5OTk5Mjg5fQ.4AoA96enMISrz6vYX3qcR55zYVBenS-yU79Kw0CkS5g"
            }
        
    ##Step 2:
        Create Job:
        POST {{URL}}/jobs
            Authorization -> pilih Bearer -> Token : {{accessToken}}
        body => raw => json :
            {
                "company":"garuda", "position":"back-end developper"
            }
        response:
            {
                "job": {
                    "status": "pending",
                    "_id": "619b684cc8cdf43503085c7b",
                    "company": "garuda",
                    "position": "back-end developper",
                    "createdBy": "619b6826c8cdf43503085c79",
                    "createdAt": "2021-11-22T09:52:12.737Z",
                    "updatedAt": "2021-11-22T09:52:12.737Z",
                    "__v": 0
                }
            }
        maka kita berahasil melakukan crate job tanpa memasukan access token terlebih dahulu.
    "LAKUKAN HAL YANG SAMA UNTUK GET ALL JOB"
        
